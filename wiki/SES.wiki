#summary Documents differences between SES (Secure EcmaScript) and ES5 (EcmaScript 5).

= Introduction =

SES is mostly defined as a fail-stop subset of ES5 that should compatibly run all ES5 code that follows recognized ES5 best practices. The SES restrictions support the writing of defensively consistent abstractions -- object abstractions that can defend their integrity while being exposed to untrusted but confined objects.

This page is for hard core developers, to document precisely the differences between the various forms of SES, and how these differ from ES5.

= Idealized SES vs ES5 =

== Whitelist Primordial State ==

== No Monkey Patching Primordials ==

== Script Code vs Eval Code ==

== Powerless thrown Errors, etc. ==

== Extra APIs ==

=== !WeakMap, !StringMap ===

=== cajaVM ===

= SES-on-ES5 vs Idealized SES =

== Tamper Proofing vs Freezing ==

= SES vs CES (Confined !EcmaScript) =

== Waive Monkey Patching Prohibition ==

== Multi-Frame Operation ==

== Defensiveness Despite Monkey Patching ==

= Source SES vs Target SES =

== Top Level Declarations ==

== typeof _variable_ ==

== `this`-binding of Global Function Calls ==

== Safety of Thrown Values ==

== Translations == 

Taking each of the above issues in order:

=== Top Level Declarations ===

|| Source SES quasi-pattern || Target SES quasi-expression ||
|| {{{js`${{progIn}}` && isProgram(progIn)}}} || {{{js`(function(global___) { $progOut })(this);`}}} ||
|| {{{js`var ${{name}}` && isGlobal(name)}}} || {{{js`global___.name`}}} ||

=== typeof _variable_ ===

|| Source SES quasi-pattern || Target SES quasi-expression ||
|| {{{js`typeof ${{name}}` && isFree(name)}}} || {{{js`$name in global___`}}} ||

=== `this`-binding of Global Function Calls ===

|| Source SES quasi-pattern || Target SES quasi-expression ||
|| {{{js`${{name}}(${{paramsIn}}*)` && isGlobalOrFree(name)}}} || {{{js`name.call(void 0, $paramsOut*)`}}} ||

=== Safety of Thrown Values ===

Ignore the line divisions below and the leading dots. It's just one rule and the dots should be leading spaces, but I don't know how to say this in a table in this wiki syntax.

|| Source SES quasi-pattern || Target SES quasi-expression ||
|| {{{js`try {}}}                         || {{{js`try {}}} ||
|| {{{.....${{tIn}} }}}                   || {{{.....$tOut}}} ||
|| {{{...} catch (${{param}}) {}}} || {{{...} catch (e___) { var $param = cleanErr___(e___);}}} ||
|| {{{.....${{cIn}} }}}                   || {{{.....$cOut}}} ||
|| {{{...} }}}                              || {{{...} }}} ||

= Browser and Platform Differences =

== Tamper Proofing vs Freezing, revisited ==