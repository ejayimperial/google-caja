#summary How to tame libraries.

*(This page is under construction)*

= Introduction =

Ideally any library you use will be included prior to Cajoling, and so will "just work" and will not need to be tamed.

However, libraries sometimes provide facilities which cannot be provided using the safe subset of Javascript that Caja provides. In that case, the library will have to be run outside the Cajoled code, within your container, and an interface to the library provided to Cajoled code. This process is known as "taming".

= Taming =

== Exposing The Library ==

First of all, the Cajoled code needs some means to access the library. In your container you should have some code looking something like this

{{{
  var imports = ___.copy(___.sharedImports);
  imports.outers = imports;
  imports.$v = ___.asFunc(valijaMaker)(imports);
  ___.getNewModuleHandler().setImports(imports);
}}}

Anything you attach to `imports` becomes a "global" variable in the scope of the Cajoled gadget (remembering that Caja rewrites globals to become properties of the `imports` object).

So, let's say that your library is exposed to your container through some object called `mylibrary`. The simplest thing to do is to expose that object like so

{{{
imports.mylibrary = mylibrary;
}}}

Now the Cajoled code can see the library, but it has no access to properties yet, these must be individually granted. So, for example

{{{
___.grantRead(mylibrary, 'someProperty');
}}}

would allow the Cajoled code to read `mylibrary.someProperty` but not to write or execute it. Similarly write access is granted with `___.grantRead(object, 'property')`, calls with `___.grantCall(object, 'property')`. Constructors are a little more complex, these are done with `___.ctor(class, parent, 'classname')`.

== Taming The Library ==

Obviously because the library you have exposed is not cajoled, it could do anything. So, you must ensure that it doesn't do anything that would allow the cajoled code to break out of its sandbox.

Firstly, only grant permissions to things you absolutely have to grant permissions to.

Secondly, anything you do grant permission to has to be carefully reviewed to make sure it is safe. Things to avoid are

  * Use of `eval()` on anything controlled by the caller.
    * If `eval()` is really necessary then you must construct what is evaled very carefully to ensure it cannot be abused by the caller.
  * Setting `innerHTML` on DOM nodes. Any caller-controlled input must be sanitised to avoid the use of script tags and the like. The easiest way to do this is to use the HTML sanitizer supplied with Caja _need reference for how to do this_.

Sometimes the easiest way to deal with these issues (especially if the library is a third-party library) is to wrap the dangerous functions in functions of your own that sanitized or otherwise restrict the inputs to the "real" functions.