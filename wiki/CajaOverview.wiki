#summary Overview of the Caja system

= Introduction =

Caja is a system for enabling the safe inclusion of untrusted third-party web content (HTML, CSS and javascript code) into a host page.  Each chunk of web content is rewritten, or "cajoled", into a form that can be isolated

= Threat model =

== _*D*_efensive code problem ==
  * Mutually suspicious gadgets can cooperate
== _*O*_ffensive code problem ==
  * A gadget can't interfere with the container
  * Gadgets can't interfere with other gadgets

= Desired features = 
== Legacy _*T*_ools problem ==
  * Existing tools can be easily adapted to support the language
== Legacy _*C*_ode problem ==
  *  Existing code can be easily adapted to work with the language
== Support _*V*_irtualization ==

= Languages =

== Cajita ==

Removes from javascript "sharp knives"
  * eval
  * with
  * this
  * variable deletion
  * Complicated coercing rules surrounding == and !=
Adds to javascript
  * cajita.freeze
  * immutable objects
Interoperates well with existing browser api
  * A decent language to program in!

Threats & features:
  * Defensive: frozen objects can't be modified by others, even within the same environment.
  * Offensive:
    * Cajita is rewritten by the cajoler into code with no free variables, so there's no way for cajita code to get access statically to references other than by explicit grant
    * Runtime checks prevent dynamic access
  * Tools: Cajita is a subset of JavaScript, so all the tools work unchanged.
  * --Code--: The language excises many of the parts of Javascript, so most old code won't work.
  * Virtualization: we can emulate all the excised parts, effectively having several separate Javascript environments.  These environments can only interact via references that they get from the host page.

== Valija ==

Adds back into Cajita "toy knives": they behave like the originals within a Cajita module without interfering with code in the other modules.

Threats & features:
  * --Defensive--: 
  * Offensive:
    * Valija is rewritten into Cajita, which is rewritten by the cajoler into code with no free variables, so there's no way for valija code to get access statically to references other than by explicit grant
    * Runtime checks prevent dynamic access
  * Tools: Valija is a subset of JavaScript, so all the tools work unchanged.
  * Code: Nearly all of Javascript is supported