#summary Differences between ES5/3 and ES5

= Introduction =

We're working on an implementation of ES5 that runs on ES3 browsers; we anticipate that this implementation, which we call "ES5/3", will take the place of Valija. We anticipate ES5/3 will run around 15 times faster than Valija, i.e., with roughly 20% overhead compared to uncajoled ES3 code; though it is still too early to measure this. SES5/3, the Cajita replacement, is exactly the same with the exception of freezing all the primordials.

SES5/3 will upwards compatible from Cajita. ES5/3 will be upwards compatible from Valija, Cajita, and SES5/3. 

There will be some differences between ES5/3 and ES5, detailed below. For code written with these in mind, ES5 will effectively be upwards compatible from ES5/3, etc...

= Differences between ES5/3 and ES5 =

  * Strict mode only
  * No `eval`
  * No `Function` constructor
  * `Object.prototype` is frozen
  * The true global object is inaccessible
  * Property names may not end in two underscores
  * Does not support creating objects with null prototype
  * In a method call, the getter is called after arguments are evaluated ([http://code.google.com/p/v8/issues/detail?id=691 V8 has the same issue])
  * Numerically named properties and `'length'`
    * Does not support FF2
    * All numeric own properties of the same object share one property descriptor
    * Numeric properties must be data properties
    * `'length'` is a non-configurable accessor property on arrays
    * `'length'` must not be an accessor property on non-arrays
    * Only supports bracketed numeric indexing into strings (e.g. `'foo'[1]`) if the underlying ES3 engine does
    * If we can statically determine that a variable will only contain numbers after being initialized and this variable is used as a property name before initialization (e.g., `x[i]`), then it may be converted to the property name `'NaN'` rather than the property name `'undefined'` (e.g., as if translated to `x[+i]`).
  * Invoking `Function.prototype` throws an error instead of returning undefined.
  * The `[[Construct]]` behavior on bound functions throws a "not yet implemented" complaint.


= Differences between ES5/3 and selected ES-Harmony features =

  * Proxies
    * Proxies can only inherit, whether directly or indirectly, from non-extensible objects or from other proxies.
    * Proxies can't trap numeric properties or 'length'
  * "Leaky" ephemeron tables
    * Membranes hold onto all references that they wrap until the membrane is revoked