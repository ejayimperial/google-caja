#summary All about Caja testing and browser tests

<wiki:toc/>

= Running tests =

== `ant` targets ==

{{{
ant runtests
}}}

    Runs all tests (including browser tests, but not including
    jQuery tests).

    Note: junit output will show failures for known-fail tests
    marked with `@FailureIsAnOption`.  Known-fails are accounted
    for after all tests are run, when generating the test
    summary.

    The test summary is at `ant-reports/tests/index.html`

{{{
ant nobrtest
}}}

    Runs only non-browser tests.
    This is identical to `"ant runtests -Dtest.exclude=*BrowserTest"`

{{{
ant brtest
}}}

    Runs only browser tests (but not jQuery tests).
    This is identical to `"ant runtests -Dtest.filter=*BrowserTest"`

{{{
ant brserve
}}}

    Starts the local HTTP server used by browser tests, then
    waits forever, which is useful for manually running and
    debugging browser tests.

    `brserve` will print a URL `.../test-index.html` that is a
    page with links to all the individual browser tests.

{{{
ant brserve+
}}}

    Same as `brserve`, but also starts the browser used by
    browser tests.

== `runtests` flags ==

{{{
-Dtest.debug=false
}}}

    If `test.debug` is true, `runtests` will listen on port 9999
    and wait for a Java debugger to connect, before starting
    tests.

{{{
-Dtest.exclude=--none--
}}}

    `runtests` will skip Java test classes that match this glob pattern.

{{{
-Dtest.filter=*Test
}}}

    `runtests` will only run Java test classes that match
    the `test.filter` glob pattern.

{{{
-Dtest.method.filter=*
}}}

    `runtests` will only run Java test methods that match the
    `test.method.filter` pattern.
    (This is supposed to be a glob, but the pattern matching is
    a little buggy, and "x" is the same as "`*x*`".)

    Note: we don't really have a way to skip running a test method.
    Instead, methods that do not
    match `test.method.filter` will pass without running
    (which makes it a little tricky to tell the difference between
    tests that pass because they ran vs tests that pass because
    they were skipped.)

{{{
-Dtest.threads=2
}}}

    `runtests` uses limited parallelism to finish faster.
    Use `"-Dtest.threads=1"` to disable parallel execution.

    Setting `test.threads` to more than 2 will not speed up tests
    much, because most of the time is spent on browser tests,
    which always run sequentially.

{{{
-Dtestonly.{X}=...
}}}

    Any property that starts with `"testonly."` will be passed
    through to the test runner, but with the `"testonly."` prefix
    removed.  This is useful for properties that you want visible
    to tests but not visible to `ant`.

== Browser test flags ==

{{{
-Dcaja.test.browser=firefox
}}}

    Chooses which browser to test.
    `"firefox"` and `"chrome"` work for local browser testing.
    `"firefox"`, `"chrome"`, and `"ie"` work for remote browser testing.

{{{
-Dcaja.test.browserPath=...
}}}

    `caja.test.browserPath` overrides the location of the Chrome
    binary when testing Chrome. This should be a full pathname.

    On MacOS, this should point at the
    `Contents/MacOS/Google_Chrome` file inside the app bundle.

{{{
-Dcaja.test.closeBrowser=false
}}}

    Normally when a browser test fails, the test runner will try to
    leave the browser open so that it can be examined later.
    When this flag is true, the test runner will always close the
    browser when done, whether it passes or fails.

{{{
-Dcaja.test.remote=...
}}}

    Setting `caja.test.remote` will run browser tests on a remote
    webdriver instead of a local webdriver.
    The value should be a URL, such as `http://remotehost:4444/`
    or `http://remotehost:4444/wd/hub/`

{{{
-Dcaja.test.serverPort=0
}}}
    Browser tests start a test HTTP server on localhost.
    This setting lets you override the server's port.
    The value `0` means to use any available port.

    When actually running tests, the default is `0`.
    But when you do `"ant brserve"` the default is `8000`,
    since a fixed port is more convenient for manual testing.

{{{
-Dcaja.test.thishostname=...
}}}

    When running a remote webdriver, the remote browser needs to
    load resources from a local HTTP server started by the test
    driver.  The test driver will guess a hostname that the
    remote browser can use to contact the local server, but the
    guess can be wrong.  Setting `caja.test.thishostname` will
    override the guessed hostname.

{{{
-Dwebdriver.{X}=...
}}}

    Any property starting with `"webdriver."` will be passed
    through to the test runner unchanged.

= Local browser testing =

== Firefox ==

{{{
ant brtest
}}}

    Firefox is the default browser for testing.  The test driver
    tries to find `firefox` in standard system locations,
    including your PATH.

    You can override the location with `"-Dwebdriver.firefox.bin=..."`

== Chrome ==

{{{
ant brtest -Dcaja.test.browser=chrome
}}}

    First, you need `chromedriver`,  which is available
    [http://code.google.com/p/chromedriver/downloads/list here].

    If you're using MacOS Homebrew,
    you can `"brew install chromedriver"`

    If `chromedriver` isn't in your PATH, you can specify the
    location with `"-Dwebdriver.chrome.driver=..."`

    `chromedriver` looks for Chrome in standard system
    locations.  You can override that with
    `"-Dcaja.test.browserPath=..."`

    On MacOS, `caja.test.browserPath` should point at the
    `Contents/MacOS/Google_Chrome` binary inside the app bundle.

    If you want more control over `chromedriver` settings, start
    it manually and treat it like a remote browser, described below.

= Remote browser testing =

    First you need to start a webdriver server on the remote
    host.

== webdriver server for Firefox and Chrome ==

{{{
java -jar selenium-server-standalone-{VERSION}.jar
}}}

    Run that on the remote host, which can be Linux,
    MacOS, or Windows.  There's a copy of
    `selenium-server-standalone` in `third_party/java/webdriver`,
    but any recent version should be fine.

    For Chrome testing, the remote host will also
    need the `chromedriver` program, which is explained
    in the "Local browser testing" section above.

    If you only want to test Chrome, you can ignore
    `selenium-server-standalone` and just run `chromedriver`
    directly on the remote host to provide webdriver service.

== webdriver server for IE ==

    You need to run `IEDriverServer` from
    [http://code.google.com/p/selenium/downloads/list here].
    [http://code.google.com/p/selenium/wiki/InternetExplorerDriver This page]
    has more information on starting and configuring the IE
    webdriver server.

== running the tests ==

{{{
ant brtest -Dcaja.test.browser=... -Dcaja.test.remote=http://...
}}}

    `caja.test.browser` can be `"firefox"` (default), `"chrome"`,
    or `"ie"`.

    For remote Linux and MacOS, `caja.test.remote` should be
    something like `http://remote:4444/wd/hub`

    For remote Windows, `caja.test.remote` should be something
    like `http://remote:4444/`

    You can verify the remote webdriver works by fetching the URL
    `http://remote:4444/wd/hub/status` or
    `http://remote:4444/status`