#summary defining and calling functions in Caja
#labels Phase-Design

= Species of Functions =

Caja distinguishes different kinds of functions since different functions can do different things.

*Constructors* are used to create new objects, and act as both class and factory.  Constructors can chain to their superclass, and manipulate the created objects {{{protected}}} interface via {{{this}}}.  Any named function that mentions {{{this}}} is a constructor.
{{{
function ClassName(a, b) {
  BaseClass.call(this, a);
  this.b_ = b;  // define a protected field
}
}}}

*Methods* are functions attached to a particular class that can manipulate the {{{protected}}} interface of instances of that class via {{{this}}}.  Any unnamed function that mentions {{{this}}} is a method.
{{{
caja.def(ClassName, SuperClass, {
  setB: function (b) { this.b_ = b; },
  getB: function () { return this.b_; }
});
}}}

*Exophoric Functions* (*xo4a*) reference {{{this}}} like methods but never use the protected API.  Their this does not need to be bound to an instance of a particular class.   Any unnamed function that mentions {{{this}}}, but does not reference the protected API is [http://en.wikipedia.org/wiki/Exophora exophoric].
{{{
node.addListener('click', function () { handleClickEvent(this.id); });
}}}

*Simple* functions don't have access to any object's {{{protected}}} interface, but can do anything else.  Any function that doesn't mention {{{this}}} is simple.
{{{
function foo(x, y) { return x + y; }
}}}


== Calling Functions ==

A function can be declared any of the ways above, but calling is more flexible.

. . . Functions defined as can be . . .
||        ||          || *Ctor* || *Method* || *xo4a* || *Simple* ||
||        || *Ctor*   || `YES`  ||   `NO`   ||  `NO`  ||  `YES`   ||
|| called || *Method* ||  `NO`  ||  `YES`   || `YES`  ||  `YES`   ||
|| . as . || *xo4a*   ||  `NO`  ||   `NO`   || `YES`  ||  `YES`   ||
||        || *Simple* ||  `NO`  ||   `NO`   ||  `NO`  ||  `YES`   ||