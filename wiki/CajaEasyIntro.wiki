#summary Simple introduction to Caja via the OpenSocial sample container

[http://incubator.apache.org/projects/shindig.html Shindig] is an Apache incubator project which is providing a reference implementation of an [http://code.google.com/apis/opensocial/ OpenSocial] container.  Shindig also (optionally) supports [http://code.google.com/p/google-caja Caja], a secure subset of Javascript.  (Caja is a Spanish word meaning "box" or "vault", pronounced KA-ha.)  You may download and build your own copy of Shindig, but if your only interest is writing gadgets, you can simply use [http://cg-in-f85.google.com/46/o/ig/files/samplecontainer/samplecontainer.html a hosted version run by Google].

=Why Use Caja?=
Gadgets are currently loaded in an `IFRAME`, which requires multiple requests to the server.  Under Caja, the gadgets are served inline, which will reduce the time it takes to fetch them.

Since the gadgets are inline under Caja, the same-origin policy does not prevent them from interacting, and a container may choose to allow gadgets from different sources to communicate and cooperate; because Caja enforces the [http://en.wikipedia.org/wiki/Object-capability_model object-capability security model], malicious gadgets can't look at the state of other gadgets in the page to steal private information, and they can't redirect the page to full-screen phishing pages.

Caja is a platform that will finally allow gadget writers to do secure mashups.

=The Sample Container=

The sample container has three main sections:  

  * At top center, there is an "address box" in a blue region into which you may enter the URL of an XML gadget description.  To the right there are three checkboxes, 
    * "use caja"
    When this box is checked, the content of the gadget (between <Content> tags) is "cajoled" before being served to the user--that is, a program examines the code and inserts runtime checks to prevent prohibited actions.
    * "use permissive.js"
    This box has no effect unless "use caja" is checked.  The file "permissive.js" whitelists all method calls, but logs to the console every call.  It is purposely insecure so that we can find out which APIs are most important to gadget authors.  It does not, however, make the window object directly available: to get the container window, one can use the statement
    {{{
window = {}.eval("window");
}}} 
    If "use permissive.js" is unchecked, then the only DOM APIs available to the gadget are `document.getElementById()` and the ability to set the `innerHTML` property of DOM elements.
    * "use cache"
    If this box is checked, the server will not refetch the gadget xml each time. If you are making rapid iterations on your gadget, you should uncheck this box, so it will fetch the newest version with each press of "reset."

  * There is a yellow region that allows you to provide a mock social network and datastore (key,value pairs) to simulate a logged-in user.  There are two ways to provide this, selected by the radio button:
    * specify a path to an XML file on the local filesystem (only the default is supported on Google's hosted version)
    * a textbox where you can manipulate the data by hand (by clicking "load" or "dump")
    
  * Below the yellow region is the area where the gadget will be rendered.

=Caja Caveats=

When using Caja, some Javascript constructs are prohibited:

  * Accessing private names from outside an object.
  Caja provides for truly private variables in Javascript:
    {{{
function F(x) {
  this.x_ = x;
}
F.prototype.getX() = function {
  return this.x_;
}
var f = new F(1);
}}}
  If we tried to execute `f.x_ = 2` or even `var y = f.x_`, we'd get a compile-time error.
  
  * Changing frozen objects.
  Caja provides a way to make data immutable.  Object and Array literals have to be explicitly frozen:
    {{{
var obj = {x:10, y:20};
obj.y = 40; // no problem
caja.freeze(obj);
obj.x = 30; // causes runtime error    
}}}
  Constructed objects are frozen and functions are frozen once used in a `new` expression:
    {{{
function F(x) {
  this.x_ = x;
}
F.prototype.getX() = function {
  return this.x_;
}

var f=new F(1);

f.y = 1; // causes runtime error

// This also causes a runtime error, though it'll work fine if you move 
// it before the "new".
F.prototype.setX(x) = function {  
  this.x_ = x;
}
}}}
  * No `this` stealing.
  In the code below, `F` chooses to expose a getter for its private variable `x_`, while `G` does not.  Caja doesn't allow you to "steal" `G`'s private variable by attaching an evil method:
  {{{
function F(x) { this.x_ = x; }
F.prototype.getX = function() { return this.x_; }
function G(x) { this.x_ = x; this.prop = 1; }
G.prototype.setProp = function(p) { this.prop = p; }

f = new F(1);
g = new G(2);
g.setProp(f.getX); // referring to f.getX causes a runtime error
g.prop();          // never gets here
}}}
  * No `with` or `eval`.
  Caja supports JSONRequest, so there's no need to use `eval` for changing a string into a JSON object; all other uses are very suspicious and cause a lot of trouble.  The keyword `with` is just plain evil, so we excised it completely.

Caja also sanitizes HTML and CSS.  It doesn't support any nonstandard extensions, like `expression` or `import`.

Caja supports the use of external scripts; when it recognizes a reference to an external script, it fetches the script, inlines it, and attempts to continue the cajoling process.  Most javascript libraries have not yet been converted to be caja-compatible, although there is work being done toward enabling the most popular ones.

="Malicious" Gadgets=
Here are two gadgets that "attack" the user:
  http://google-caja.googlecode.com/files/window.top.xml
  http://google-caja.googlecode.com/files/grabcookie.xml
Copy either URL into the address bar of the sample container and press the "reset" button to try it out.  

The first gadget has a single button.  When the button is clicked, it attempts to set `window.top.location` to `http://www.google.com`.  When the "use caja" box is not checked, the attack succeeds; when it is checked, the attack fails and a runtime error occurs.

The first gadget has a textbox and a button.  When the button is clicked, it attempts to read the value of `document.cookie` and display it in the textbox.  When the "use caja" box is not checked, the attack succeeds; when it is checked, the attack fails and a runtime error occurs.

=Everything Else=
If you have other questions, feel free to post them to the [http://groups.google.com/group/opensocial-api/topics OpenSocial mailing list].