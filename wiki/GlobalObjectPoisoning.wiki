#labels Attack-Vector
=Global Object Poisoning=

==Effect==
Can lead to a plugin's method being invoked in the context of the application's object, thus allowing the method to steal references to the object itself, its fields, and its methods ; or to replace its fields and methods.  This includes methods that are frequently implicitly invoked such as toString and valueOf.

Can lead to a spurious value showing up when iterating over keys in an Object or Array.


==Background==
Array and Object are implicitly referred to via the array and object literal syntaxes and Object is the base of all prototype chains, so even if global reference is removed, they are still implicitly invoked.


==Assumptions==
Cannot do this if cannot modify the prototype of Object or Array.

Global reference is not necessary.  The examples below work if
   Array.prototype
is replaced with
   [].constructor.prototype
and Object similarly


==Versions==
Works in IE 6 and Firefox.  Example 2 works in Safari, but 1 is untested in Safari.


==Example==
(1) Array poisoning
{{{
Array.prototype[4] = 'four';
var a1 = [];
alert('a1 has length ' + a1.length + ' but element 4 is ' + a1[4]);

var a2 = new Array(5);
alert('a2 has length ' + a2.length + ' and its element 4 is also ' + a2[4]);
}}}


(2) Object poisoning
{{{
Object.prototype.toString = function () {
  var name = this.name ;
  this.name = 'mud';
  return 'HA ' + name + '.  IM STEALIN UR CODEZ!';
};
var o = { name: 'Bingo' };
alert('' + o);
alert('Your name is now ' + o.name);
}}}