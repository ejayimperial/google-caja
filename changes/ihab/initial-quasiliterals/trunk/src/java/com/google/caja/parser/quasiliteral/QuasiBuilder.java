// Copyright (C) 2007 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.caja.parser.quasiliteral;

import com.google.caja.parser.ParseTreeNode;
import com.google.caja.parser.js.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Creates a JavaScript {@link QuasiNode} tree given a JavaScript
 * {@link com.google.caja.parser.ParseTreeNode} tree.
 *
 * @author ihab.awad@gmail.com (Ihab Awad)
 */
public class QuasiBuilder {

  /**
   * Given an AST of a JavaScript program, as generated by a Caja
   * {@link com.google.caja.parser.js.Parser}, return a {@code QuasiNode} that results
   * from interpreting the program as a quasiliteral pattern.
   *
   * @param n a ParseTreeNode.
   * @return the QuasiNode representation of the input.
   */
  public static QuasiNode build(ParseTreeNode n) {
    if (n instanceof ExpressionStmt &&
        n.children().size() == 1 &&
        n.children().get(0) instanceof Reference &&
        ((Reference)n.children().get(0)).getIdentifierName().startsWith("@")) {
      return buildMatchNode(Statement.class, ((Reference)n.children().get(0)).getIdentifierName());
    }

    if (n instanceof Reference &&
        ((Reference)n).getIdentifierName().startsWith("@")) {
      return buildMatchNode(Expression.class, ((Reference)n).getIdentifierName());
    }

    if (n instanceof Identifier &&
        ((Identifier)n).getValue().startsWith("@")) {
      return buildMatchNode(Identifier.class, ((Identifier)n).getValue());
    }
    
    return buildSimpleNode(n);
  }

  private static QuasiNode buildSimpleNode(ParseTreeNode n) {
    return new SimpleQuasiNode(
        n.getClass(),
        n.getValue(),
        buildChildrenOf(n));    
  }

  private static QuasiNode buildMatchNode(Class matchedClass, String quasiString) {
    assert(quasiString.startsWith("@"));
    if (quasiString.endsWith("*")) {
      return new MultipleQuasiMatchNode(
          matchedClass,
          quasiString.substring(1, quasiString.length() - 1));
    } else if (quasiString.endsWith("+")) {
      return new MultipleNonemptyQuasiMatchNode(
          matchedClass,
          quasiString.substring(1, quasiString.length() - 1));
    } else {
      return new SingleQuasiMatchNode(
          matchedClass,
          quasiString.substring(1, quasiString.length()));
    }
  }

  private static QuasiNode[] buildChildrenOf(ParseTreeNode n) {
    List<QuasiNode> children = new ArrayList<QuasiNode>();
    for (ParseTreeNode child : n.children()) children.add(build(child));
    return children.toArray(new QuasiNode[children.size()]);
  }
}
