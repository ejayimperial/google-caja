// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.caja.plugin;

import com.google.caja.parser.ParseTreeNode;
import com.google.caja.parser.js.Declaration;
import com.google.caja.parser.js.Reference;
import com.google.caja.util.SyntheticAttributeKey;

/**
 * Defines shared {@code SyntheticAttribute} instances that control the rewriting process.
 *
 * @author mikesamuel@gmail.com
 */
public final class SyntheticNodes {
  /**
   * Defines a Synthetic Attribute that marks a node as having been generated
   * as part of the compilation process.
   *
   * Such nodes can be exempted from scrutiny by other nodes.  For example,
   * javascript identifiers in the {@code *__} namespace are reserved for
   * use by Caja runtime checks.  {@link Reference}s and {@link Declaration}s
   * generated by the Caja compile with names like that should be marked synthetic
   * so that they won't be rejected by the validator.  But since user code is
   * not synthetic, they will be rejected by the validator.
   */
  public static final SyntheticAttributeKey<Boolean> SYNTHETIC
      = new SyntheticAttributeKey<Boolean>(Boolean.class, "synthetic");

  /**
   * Defines a Synthetic Attribute that marks a node as being "tainted" in some way.
   *
   * This is used to ensure that all nodes have been "seen" by a security checking
   * or other critical process. The input is first marked "tainted", and the code is
   * written such that any concrete step that recognizes a node un-taints it (or
   * produces an un-tainted result as the output). The process can then check to make
   * sure that all its output is not tainted.
   */  
  public static final SyntheticAttributeKey<Boolean> TAINTED
      = new SyntheticAttributeKey<Boolean>(Boolean.class, "tainted");
  
  /**
   * A convenience function used to mark all nodes created by the gxp compiler
   * as {@link #SYNTHETIC synthetic}.  The only non synthetic
   * nodes in the compiled javascript will be those corresponsing to javascript
   * embedded in the gxp.
   * <p>
   * This is meant to be imported statically.
   */
  public static <T extends ParseTreeNode> T s(T t) {
    t.getAttributes().set(SYNTHETIC, Boolean.TRUE);
    return t;
  }
}
